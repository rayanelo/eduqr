package main

import (
	"eduqr-backend/config"
	"eduqr-backend/internal/database"
	"eduqr-backend/internal/models"
	"log"
)

func main() {
	// Load configuration
	cfg := config.LoadConfig()

	// Connect to database
	err := database.ConnectDB(cfg)
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}

	db := database.GetDB()

	log.Println("üîç V√©rification des cours r√©currents...")

	// R√©cup√©rer tous les cours
	var courses []models.Course
	err = db.Preload("Subject").Preload("Teacher").Preload("Room").Find(&courses).Error
	if err != nil {
		log.Fatal("Erreur lors de la r√©cup√©ration des cours:", err)
	}

	log.Printf("üìä Nombre total de cours: %d", len(courses))

	// Analyser les cours r√©currents
	recurringParents := 0
	recurringChildren := 0

	for _, course := range courses {
		if course.IsRecurring {
			if course.RecurrenceID == nil {
				// C'est un cours parent r√©current
				recurringParents++
				log.Printf("üîÑ Cours parent r√©current ID %d: %s", course.ID, course.Name)
				log.Printf("   - Pattern: %s", *course.RecurrencePattern)
				log.Printf("   - Date de fin: %s", *course.RecurrenceEndDate)
				log.Printf("   - Date de d√©but: %s", course.StartTime)
				log.Printf("   - Dur√©e: %d minutes", course.Duration)
			} else {
				// C'est un cours enfant r√©current
				recurringChildren++
				log.Printf("   üìÖ Cours enfant ID %d (parent: %d): %s", course.ID, *course.RecurrenceID, course.Name)
				log.Printf("      - Date: %s", course.StartTime)
			}
		}
	}

	log.Printf("")
	log.Printf("üìà R√©sum√© des cours r√©currents:")
	log.Printf("   - Cours parents r√©currents: %d", recurringParents)
	log.Printf("   - Cours enfants r√©currents: %d", recurringChildren)

	if recurringParents > 0 && recurringChildren == 0 {
		log.Printf("")
		log.Printf("‚ö†Ô∏è  PROBL√àME D√âTECT√â: Il y a %d cours parents r√©currents mais aucun cours enfant!", recurringParents)
		log.Printf("   Cela indique que la g√©n√©ration des cours r√©currents ne fonctionne pas.")
	} else if recurringParents > 0 && recurringChildren > 0 {
		log.Printf("")
		log.Printf("‚úÖ Les cours r√©currents semblent fonctionner correctement!")
	} else {
		log.Printf("")
		log.Printf("‚ÑπÔ∏è  Aucun cours r√©current trouv√© dans la base de donn√©es.")
	}
}
